name: Upload Python Package

on:
  push:
    tags:
    - '[0-9]+.[0-9]+.[0-9]'
#on:
#  release:
#    types: published

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      # This permission is required for trusted publishing.
      id-token: write
    
    
    steps:
      - uses: actions/checkout@v3
    
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
            python-version: '3.10'
                  
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
            virtualenvs-create: false
      
      - name: Change version in pyproject.toml
        run: |
            echo ${{  github.ref_name }}
            poetry version ${{  github.ref_name }}
            poetry build
            
            # retrieve the ambient OIDC token
            resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                           "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
            oidc_token=$(jq '.value' <<< "${resp}")
            
            resp=$(curl -X POST https://pypi.org/_/oidc/github/mint-token -d "{\"token\":${oidc_token}}")
            api_token=$(jq '.token' <<< "${resp}")
            
            api_token=$(echo ${api_token})
            echo "API ${api_token}"
            
            api_token=$(echo ${api_token} | tr -dc '[:print:]' )
            echo "API ${api_token}"
            
            #poetry publish -vv -u __token__ -p ${api_token}

            # mask the newly minted API token, so that we don't accidentally leak it
            echo "::add-mask::${api_token}"

            # see the next step in the workflow for an example of using this step output
            echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      - name: publish
        # gh-action-pypi-publish uses TWINE_PASSWORD automatically
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
